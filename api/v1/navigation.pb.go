// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/navigation.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Navigation struct {
	Id          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Href        string     `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty"`
	Target      string     `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Color       string     `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Sort        int32      `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Enable      bool       `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	ParentId    int64      `protobuf:"varint,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description string     `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *time.Time `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt   *time.Time `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Fixed       bool       `protobuf:"varint,12,opt,name=fixed,proto3" json:"fixed,omitempty"`
}

func (m *Navigation) Reset()         { *m = Navigation{} }
func (m *Navigation) String() string { return proto.CompactTextString(m) }
func (*Navigation) ProtoMessage()    {}
func (*Navigation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811b784a9b7a42f, []int{0}
}
func (m *Navigation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Navigation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Navigation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Navigation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Navigation.Merge(m, src)
}
func (m *Navigation) XXX_Size() int {
	return m.Size()
}
func (m *Navigation) XXX_DiscardUnknown() {
	xxx_messageInfo_Navigation.DiscardUnknown(m)
}

var xxx_messageInfo_Navigation proto.InternalMessageInfo

func (m *Navigation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Navigation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Navigation) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Navigation) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Navigation) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Navigation) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *Navigation) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Navigation) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Navigation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Navigation) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Navigation) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Navigation) GetFixed() bool {
	if m != nil {
		return m.Fixed
	}
	return false
}

type DeleteNavigationRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteNavigationRequest) Reset()         { *m = DeleteNavigationRequest{} }
func (m *DeleteNavigationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNavigationRequest) ProtoMessage()    {}
func (*DeleteNavigationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811b784a9b7a42f, []int{1}
}
func (m *DeleteNavigationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNavigationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNavigationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNavigationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNavigationRequest.Merge(m, src)
}
func (m *DeleteNavigationRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNavigationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNavigationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNavigationRequest proto.InternalMessageInfo

func (m *DeleteNavigationRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetNavigationRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetNavigationRequest) Reset()         { *m = GetNavigationRequest{} }
func (m *GetNavigationRequest) String() string { return proto.CompactTextString(m) }
func (*GetNavigationRequest) ProtoMessage()    {}
func (*GetNavigationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811b784a9b7a42f, []int{2}
}
func (m *GetNavigationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNavigationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNavigationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNavigationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNavigationRequest.Merge(m, src)
}
func (m *GetNavigationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNavigationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNavigationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNavigationRequest proto.InternalMessageInfo

func (m *GetNavigationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListNavigationRequest struct {
	Page  int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size_ int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Wd    string   `protobuf:"bytes,3,opt,name=wd,proto3" json:"wd,omitempty"`
	Field []string `protobuf:"bytes,4,rep,name=field,proto3" json:"field,omitempty"`
	Order string   `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *ListNavigationRequest) Reset()         { *m = ListNavigationRequest{} }
func (m *ListNavigationRequest) String() string { return proto.CompactTextString(m) }
func (*ListNavigationRequest) ProtoMessage()    {}
func (*ListNavigationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811b784a9b7a42f, []int{3}
}
func (m *ListNavigationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNavigationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNavigationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNavigationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNavigationRequest.Merge(m, src)
}
func (m *ListNavigationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNavigationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNavigationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNavigationRequest proto.InternalMessageInfo

func (m *ListNavigationRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListNavigationRequest) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ListNavigationRequest) GetWd() string {
	if m != nil {
		return m.Wd
	}
	return ""
}

func (m *ListNavigationRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *ListNavigationRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type ListNavigationReply struct {
	Total      int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Navigation []*Navigation `protobuf:"bytes,2,rep,name=navigation,proto3" json:"navigation,omitempty"`
}

func (m *ListNavigationReply) Reset()         { *m = ListNavigationReply{} }
func (m *ListNavigationReply) String() string { return proto.CompactTextString(m) }
func (*ListNavigationReply) ProtoMessage()    {}
func (*ListNavigationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811b784a9b7a42f, []int{4}
}
func (m *ListNavigationReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNavigationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNavigationReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNavigationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNavigationReply.Merge(m, src)
}
func (m *ListNavigationReply) XXX_Size() int {
	return m.Size()
}
func (m *ListNavigationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNavigationReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListNavigationReply proto.InternalMessageInfo

func (m *ListNavigationReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListNavigationReply) GetNavigation() []*Navigation {
	if m != nil {
		return m.Navigation
	}
	return nil
}

func init() {
	proto.RegisterType((*Navigation)(nil), "api.v1.Navigation")
	proto.RegisterType((*DeleteNavigationRequest)(nil), "api.v1.DeleteNavigationRequest")
	proto.RegisterType((*GetNavigationRequest)(nil), "api.v1.GetNavigationRequest")
	proto.RegisterType((*ListNavigationRequest)(nil), "api.v1.ListNavigationRequest")
	proto.RegisterType((*ListNavigationReply)(nil), "api.v1.ListNavigationReply")
}

func init() { proto.RegisterFile("api/v1/navigation.proto", fileDescriptor_4811b784a9b7a42f) }

var fileDescriptor_4811b784a9b7a42f = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x6b, 0x27, 0xcd, 0xd7, 0x4c, 0xbe, 0x56, 0x65, 0x09, 0xcd, 0xe2, 0xb6, 0x89, 0xe5,
	0x03, 0x0a, 0x3d, 0xd8, 0x6a, 0x10, 0x17, 0x38, 0xa0, 0x16, 0x10, 0xaa, 0x84, 0x50, 0x65, 0xc1,
	0x01, 0xa4, 0xaa, 0xda, 0x66, 0xb7, 0x66, 0x25, 0xc7, 0x6b, 0xec, 0x6d, 0x4a, 0xe1, 0x82, 0x78,
	0x82, 0x4a, 0xbc, 0x14, 0xc7, 0x4a, 0x5c, 0xb8, 0x81, 0x5a, 0xde, 0x81, 0x2b, 0xf2, 0xee, 0xba,
	0x4d, 0x5b, 0x47, 0x70, 0x9b, 0x99, 0x1d, 0xff, 0xfe, 0x9b, 0xf9, 0xcf, 0x06, 0x3a, 0x24, 0xe5,
	0xc1, 0x78, 0x3d, 0x48, 0xc8, 0x98, 0x47, 0x44, 0x72, 0x91, 0xf8, 0x69, 0x26, 0xa4, 0x40, 0x0d,
	0x92, 0x72, 0x7f, 0xbc, 0xee, 0xf4, 0x22, 0x21, 0xa2, 0x98, 0x05, 0xaa, 0xba, 0x77, 0xb0, 0x1f,
	0x48, 0x3e, 0x62, 0xb9, 0x24, 0xa3, 0x54, 0x37, 0x3a, 0xed, 0x48, 0x44, 0x42, 0x85, 0x41, 0x11,
	0x99, 0xea, 0x8a, 0xf9, 0xac, 0xc0, 0x93, 0x24, 0x11, 0x52, 0xb1, 0x73, 0x73, 0xba, 0x7c, 0x15,
	0xca, 0x46, 0xa9, 0x3c, 0xd2, 0x87, 0xde, 0x6f, 0x1b, 0xe0, 0xc5, 0xf9, 0x75, 0xd0, 0x02, 0xd8,
	0x9c, 0x62, 0xcb, 0xb5, 0xfa, 0xb5, 0xd0, 0xe6, 0x14, 0xb5, 0x61, 0x56, 0x72, 0x19, 0x33, 0x6c,
	0xbb, 0x56, 0xbf, 0x19, 0xea, 0x04, 0x21, 0xa8, 0xbf, 0xcd, 0xd8, 0x3e, 0xae, 0xa9, 0xa2, 0x8a,
	0xd1, 0x12, 0x34, 0x24, 0xc9, 0x22, 0x26, 0x71, 0x5d, 0x55, 0x4d, 0x56, 0x10, 0x86, 0x22, 0x16,
	0x19, 0x9e, 0xd5, 0x04, 0x95, 0x14, 0x84, 0x5c, 0x64, 0x12, 0x37, 0x5c, 0xab, 0x3f, 0x1b, 0xaa,
	0xb8, 0x20, 0xb0, 0x84, 0xec, 0xc5, 0x0c, 0xff, 0xe7, 0x5a, 0xfd, 0xb9, 0xd0, 0x64, 0x68, 0x19,
	0x9a, 0x29, 0xc9, 0x58, 0x22, 0x77, 0x39, 0xc5, 0x73, 0xea, 0x6a, 0x73, 0xba, 0xb0, 0x45, 0x91,
	0x0b, 0x2d, 0xca, 0xf2, 0x61, 0xc6, 0xd3, 0xe2, 0xfe, 0xb8, 0xa9, 0x44, 0x26, 0x4b, 0xe8, 0x11,
	0xc0, 0x30, 0x63, 0x44, 0x32, 0xba, 0x4b, 0x24, 0x06, 0xd7, 0xea, 0xb7, 0x06, 0x8e, 0xaf, 0x67,
	0xe2, 0x97, 0x33, 0xf1, 0x5f, 0x96, 0x83, 0xde, 0xac, 0x1f, 0xff, 0xe8, 0x59, 0x61, 0xd3, 0x7c,
	0xb3, 0x21, 0x0b, 0xc0, 0x41, 0x4a, 0x4b, 0x40, 0xeb, 0x5f, 0x01, 0xe6, 0x9b, 0x0d, 0x35, 0x82,
	0x7d, 0xfe, 0x9e, 0x51, 0xfc, 0xbf, 0xfa, 0x5d, 0x3a, 0xf1, 0xee, 0x42, 0xe7, 0x09, 0x8b, 0x99,
	0x64, 0x17, 0xe3, 0x0f, 0xd9, 0xbb, 0x03, 0x96, 0xcb, 0x73, 0x17, 0x6a, 0xda, 0x05, 0xef, 0x0e,
	0xb4, 0x9f, 0x31, 0x39, 0xbd, 0xcf, 0xb8, 0xe5, 0x7d, 0x84, 0x5b, 0xcf, 0x79, 0x5e, 0xd1, 0x88,
	0xa0, 0x9e, 0x92, 0x88, 0x99, 0x56, 0x15, 0x2b, 0x0b, 0xf8, 0x07, 0xed, 0x6c, 0x2d, 0x54, 0x71,
	0x01, 0x3c, 0xa4, 0xc6, 0x56, 0xfb, 0x90, 0xea, 0x9b, 0xb3, 0x98, 0xe2, 0xba, 0x5b, 0x2b, 0xcc,
	0x53, 0x49, 0x51, 0x15, 0x19, 0x65, 0xe7, 0x96, 0xaa, 0xc4, 0xdb, 0x85, 0x9b, 0x57, 0xc5, 0xd3,
	0xf8, 0x48, 0x6d, 0x90, 0x90, 0x24, 0x36, 0xda, 0x3a, 0x41, 0x03, 0x80, 0x8b, 0x47, 0x80, 0x6d,
	0xb7, 0xd6, 0x6f, 0x0d, 0x90, 0xaf, 0x5f, 0x81, 0x3f, 0x81, 0x98, 0xe8, 0x1a, 0x7c, 0xaa, 0xc3,
	0xfc, 0xc5, 0xd1, 0xc6, 0xf6, 0x16, 0x7a, 0x0d, 0x8b, 0x8f, 0x95, 0x4d, 0x13, 0x1b, 0x5c, 0x41,
	0x71, 0x2a, 0x6a, 0xde, 0xea, 0xe7, 0x6f, 0xbf, 0xbe, 0xd8, 0x1d, 0x0f, 0x05, 0xd7, 0x1e, 0xe5,
	0x03, 0x6b, 0x0d, 0xed, 0xc0, 0xe2, 0x2b, 0x65, 0xe0, 0x5f, 0xd0, 0x4b, 0xd7, 0x16, 0xe1, 0x69,
	0xf1, 0xba, 0x4a, 0xbc, 0x33, 0x05, 0x1f, 0xc1, 0xe2, 0x55, 0xf3, 0x51, 0xaf, 0xc4, 0x4f, 0x59,
	0x8b, 0xa9, 0x5a, 0x8e, 0xd2, 0x6a, 0xaf, 0x55, 0x68, 0xa1, 0x1d, 0x98, 0xbf, 0xb4, 0x3a, 0x68,
	0xa5, 0x54, 0xa9, 0xda, 0xa8, 0xca, 0x49, 0x19, 0x3c, 0xaa, 0xc2, 0x8f, 0x60, 0xe1, 0xb2, 0xe9,
	0x68, 0xb5, 0x24, 0x54, 0x6e, 0xa2, 0xb3, 0x3c, 0xed, 0x38, 0x8d, 0x8f, 0xbc, 0x9e, 0x52, 0xba,
	0x8d, 0x3a, 0xd7, 0x95, 0x82, 0x98, 0xe7, 0x72, 0xf3, 0xfe, 0xd7, 0xd3, 0xae, 0x75, 0x72, 0xda,
	0xb5, 0x7e, 0x9e, 0x76, 0xad, 0xe3, 0xb3, 0xee, 0xcc, 0xc9, 0x59, 0x77, 0xe6, 0xfb, 0x59, 0x77,
	0x06, 0xcc, 0x3f, 0xe8, 0xb6, 0xf5, 0xe6, 0xc6, 0x48, 0x64, 0x8c, 0x8a, 0xa1, 0x61, 0x3c, 0x1c,
	0xaf, 0xef, 0x35, 0xd4, 0xc0, 0xee, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x29, 0x3a, 0x2a,
	0x80, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NavigationAPIClient is the client API for NavigationAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NavigationAPIClient interface {
	CreateNavigation(ctx context.Context, in *Navigation, opts ...grpc.CallOption) (*Navigation, error)
	UpdateNavigation(ctx context.Context, in *Navigation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNavigation(ctx context.Context, in *DeleteNavigationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNavigation(ctx context.Context, in *GetNavigationRequest, opts ...grpc.CallOption) (*Navigation, error)
	ListNavigation(ctx context.Context, in *ListNavigationRequest, opts ...grpc.CallOption) (*ListNavigationReply, error)
}

type navigationAPIClient struct {
	cc *grpc.ClientConn
}

func NewNavigationAPIClient(cc *grpc.ClientConn) NavigationAPIClient {
	return &navigationAPIClient{cc}
}

func (c *navigationAPIClient) CreateNavigation(ctx context.Context, in *Navigation, opts ...grpc.CallOption) (*Navigation, error) {
	out := new(Navigation)
	err := c.cc.Invoke(ctx, "/api.v1.NavigationAPI/CreateNavigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navigationAPIClient) UpdateNavigation(ctx context.Context, in *Navigation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.NavigationAPI/UpdateNavigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navigationAPIClient) DeleteNavigation(ctx context.Context, in *DeleteNavigationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.NavigationAPI/DeleteNavigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navigationAPIClient) GetNavigation(ctx context.Context, in *GetNavigationRequest, opts ...grpc.CallOption) (*Navigation, error) {
	out := new(Navigation)
	err := c.cc.Invoke(ctx, "/api.v1.NavigationAPI/GetNavigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navigationAPIClient) ListNavigation(ctx context.Context, in *ListNavigationRequest, opts ...grpc.CallOption) (*ListNavigationReply, error) {
	out := new(ListNavigationReply)
	err := c.cc.Invoke(ctx, "/api.v1.NavigationAPI/ListNavigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NavigationAPIServer is the server API for NavigationAPI service.
type NavigationAPIServer interface {
	CreateNavigation(context.Context, *Navigation) (*Navigation, error)
	UpdateNavigation(context.Context, *Navigation) (*emptypb.Empty, error)
	DeleteNavigation(context.Context, *DeleteNavigationRequest) (*emptypb.Empty, error)
	GetNavigation(context.Context, *GetNavigationRequest) (*Navigation, error)
	ListNavigation(context.Context, *ListNavigationRequest) (*ListNavigationReply, error)
}

// UnimplementedNavigationAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNavigationAPIServer struct {
}

func (*UnimplementedNavigationAPIServer) CreateNavigation(ctx context.Context, req *Navigation) (*Navigation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNavigation not implemented")
}
func (*UnimplementedNavigationAPIServer) UpdateNavigation(ctx context.Context, req *Navigation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNavigation not implemented")
}
func (*UnimplementedNavigationAPIServer) DeleteNavigation(ctx context.Context, req *DeleteNavigationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNavigation not implemented")
}
func (*UnimplementedNavigationAPIServer) GetNavigation(ctx context.Context, req *GetNavigationRequest) (*Navigation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNavigation not implemented")
}
func (*UnimplementedNavigationAPIServer) ListNavigation(ctx context.Context, req *ListNavigationRequest) (*ListNavigationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNavigation not implemented")
}

func RegisterNavigationAPIServer(s *grpc.Server, srv NavigationAPIServer) {
	s.RegisterService(&_NavigationAPI_serviceDesc, srv)
}

func _NavigationAPI_CreateNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Navigation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavigationAPIServer).CreateNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.NavigationAPI/CreateNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavigationAPIServer).CreateNavigation(ctx, req.(*Navigation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NavigationAPI_UpdateNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Navigation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavigationAPIServer).UpdateNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.NavigationAPI/UpdateNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavigationAPIServer).UpdateNavigation(ctx, req.(*Navigation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NavigationAPI_DeleteNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNavigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavigationAPIServer).DeleteNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.NavigationAPI/DeleteNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavigationAPIServer).DeleteNavigation(ctx, req.(*DeleteNavigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NavigationAPI_GetNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNavigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavigationAPIServer).GetNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.NavigationAPI/GetNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavigationAPIServer).GetNavigation(ctx, req.(*GetNavigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NavigationAPI_ListNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNavigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavigationAPIServer).ListNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.NavigationAPI/ListNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavigationAPIServer).ListNavigation(ctx, req.(*ListNavigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NavigationAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.NavigationAPI",
	HandlerType: (*NavigationAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNavigation",
			Handler:    _NavigationAPI_CreateNavigation_Handler,
		},
		{
			MethodName: "UpdateNavigation",
			Handler:    _NavigationAPI_UpdateNavigation_Handler,
		},
		{
			MethodName: "DeleteNavigation",
			Handler:    _NavigationAPI_DeleteNavigation_Handler,
		},
		{
			MethodName: "GetNavigation",
			Handler:    _NavigationAPI_GetNavigation_Handler,
		},
		{
			MethodName: "ListNavigation",
			Handler:    _NavigationAPI_ListNavigation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/navigation.proto",
}

func (m *Navigation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Navigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Navigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fixed {
		i--
		if m.Fixed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintNavigation(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintNavigation(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ParentId != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x40
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Sort != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Href) > 0 {
		i -= len(m.Href)
		copy(dAtA[i:], m.Href)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Href)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNavigationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNavigationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNavigationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA4 := make([]byte, len(m.Id)*10)
		var j3 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintNavigation(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNavigationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNavigationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNavigationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNavigationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNavigationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNavigationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field[iNdEx])
			copy(dAtA[i:], m.Field[iNdEx])
			i = encodeVarintNavigation(dAtA, i, uint64(len(m.Field[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Wd) > 0 {
		i -= len(m.Wd)
		copy(dAtA[i:], m.Wd)
		i = encodeVarintNavigation(dAtA, i, uint64(len(m.Wd)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNavigationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNavigationReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNavigationReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Navigation) > 0 {
		for iNdEx := len(m.Navigation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Navigation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNavigation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintNavigation(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNavigation(dAtA []byte, offset int, v uint64) int {
	offset -= sovNavigation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Navigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNavigation(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovNavigation(uint64(m.Sort))
	}
	if m.Enable {
		n += 2
	}
	if m.ParentId != 0 {
		n += 1 + sovNavigation(uint64(m.ParentId))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovNavigation(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovNavigation(uint64(l))
	}
	if m.Fixed {
		n += 2
	}
	return n
}

func (m *DeleteNavigationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovNavigation(uint64(e))
		}
		n += 1 + sovNavigation(uint64(l)) + l
	}
	return n
}

func (m *GetNavigationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNavigation(uint64(m.Id))
	}
	return n
}

func (m *ListNavigationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovNavigation(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovNavigation(uint64(m.Size_))
	}
	l = len(m.Wd)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	if len(m.Field) > 0 {
		for _, s := range m.Field {
			l = len(s)
			n += 1 + l + sovNavigation(uint64(l))
		}
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovNavigation(uint64(l))
	}
	return n
}

func (m *ListNavigationReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovNavigation(uint64(m.Total))
	}
	if len(m.Navigation) > 0 {
		for _, e := range m.Navigation {
			l = e.Size()
			n += 1 + l + sovNavigation(uint64(l))
		}
	}
	return n
}

func sovNavigation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNavigation(x uint64) (n int) {
	return sovNavigation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Navigation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNavigation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Navigation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Navigation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fixed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNavigation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNavigation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNavigationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNavigation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNavigationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNavigationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNavigation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNavigation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNavigation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNavigation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNavigation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNavigation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNavigation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNavigationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNavigation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNavigationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNavigationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNavigation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNavigation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNavigationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNavigation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNavigationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNavigationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNavigation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNavigation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNavigationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNavigation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNavigationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNavigationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Navigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNavigation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNavigation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Navigation = append(m.Navigation, &Navigation{})
			if err := m.Navigation[len(m.Navigation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNavigation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNavigation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNavigation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNavigation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNavigation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNavigation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNavigation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNavigation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNavigation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNavigation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNavigation = fmt.Errorf("proto: unexpected end of group")
)
