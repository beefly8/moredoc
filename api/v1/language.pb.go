// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/language.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Language struct {
	Id        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Language  string     `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Enable    bool       `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	Code      string     `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Total     int32      `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Sort      int32      `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *Language) Reset()         { *m = Language{} }
func (m *Language) String() string { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()    {}
func (*Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b7f0bb6aa63037c, []int{0}
}
func (m *Language) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Language.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Language.Merge(m, src)
}
func (m *Language) XXX_Size() int {
	return m.Size()
}
func (m *Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Language proto.InternalMessageInfo

func (m *Language) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Language) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Language) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Language) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Language) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Language) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *Language) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Language) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type UpdateLanguageStatusRequest struct {
	Id     []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	Enable bool    `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *UpdateLanguageStatusRequest) Reset()         { *m = UpdateLanguageStatusRequest{} }
func (m *UpdateLanguageStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateLanguageStatusRequest) ProtoMessage()    {}
func (*UpdateLanguageStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b7f0bb6aa63037c, []int{1}
}
func (m *UpdateLanguageStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLanguageStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLanguageStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLanguageStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLanguageStatusRequest.Merge(m, src)
}
func (m *UpdateLanguageStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLanguageStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLanguageStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLanguageStatusRequest proto.InternalMessageInfo

func (m *UpdateLanguageStatusRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UpdateLanguageStatusRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type ListLanguageRequest struct {
	Wd     string   `protobuf:"bytes,1,opt,name=wd,proto3" json:"wd,omitempty"`
	Enable []bool   `protobuf:"varint,2,rep,packed,name=enable,proto3" json:"enable,omitempty"`
	Field  []string `protobuf:"bytes,3,rep,name=field,proto3" json:"field,omitempty"`
	Page   int32    `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size_  int32    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *ListLanguageRequest) Reset()         { *m = ListLanguageRequest{} }
func (m *ListLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*ListLanguageRequest) ProtoMessage()    {}
func (*ListLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b7f0bb6aa63037c, []int{2}
}
func (m *ListLanguageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLanguageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLanguageRequest.Merge(m, src)
}
func (m *ListLanguageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLanguageRequest proto.InternalMessageInfo

func (m *ListLanguageRequest) GetWd() string {
	if m != nil {
		return m.Wd
	}
	return ""
}

func (m *ListLanguageRequest) GetEnable() []bool {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ListLanguageRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *ListLanguageRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListLanguageRequest) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type ListLanguageReply struct {
	Total    int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Language []*Language `protobuf:"bytes,2,rep,name=language,proto3" json:"language,omitempty"`
}

func (m *ListLanguageReply) Reset()         { *m = ListLanguageReply{} }
func (m *ListLanguageReply) String() string { return proto.CompactTextString(m) }
func (*ListLanguageReply) ProtoMessage()    {}
func (*ListLanguageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b7f0bb6aa63037c, []int{3}
}
func (m *ListLanguageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLanguageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLanguageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLanguageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLanguageReply.Merge(m, src)
}
func (m *ListLanguageReply) XXX_Size() int {
	return m.Size()
}
func (m *ListLanguageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLanguageReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListLanguageReply proto.InternalMessageInfo

func (m *ListLanguageReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListLanguageReply) GetLanguage() []*Language {
	if m != nil {
		return m.Language
	}
	return nil
}

type DeleteLanguageRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteLanguageRequest) Reset()         { *m = DeleteLanguageRequest{} }
func (m *DeleteLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteLanguageRequest) ProtoMessage()    {}
func (*DeleteLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b7f0bb6aa63037c, []int{4}
}
func (m *DeleteLanguageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLanguageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLanguageRequest.Merge(m, src)
}
func (m *DeleteLanguageRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLanguageRequest proto.InternalMessageInfo

func (m *DeleteLanguageRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*Language)(nil), "api.v1.Language")
	proto.RegisterType((*UpdateLanguageStatusRequest)(nil), "api.v1.UpdateLanguageStatusRequest")
	proto.RegisterType((*ListLanguageRequest)(nil), "api.v1.ListLanguageRequest")
	proto.RegisterType((*ListLanguageReply)(nil), "api.v1.ListLanguageReply")
	proto.RegisterType((*DeleteLanguageRequest)(nil), "api.v1.DeleteLanguageRequest")
}

func init() { proto.RegisterFile("api/v1/language.proto", fileDescriptor_4b7f0bb6aa63037c) }

var fileDescriptor_4b7f0bb6aa63037c = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xd8, 0x49, 0xbe, 0x64, 0xf2, 0x29, 0x6a, 0x87, 0xa4, 0x35, 0x4e, 0xeb, 0x5a, 0x66,
	0x81, 0x55, 0x21, 0x5b, 0x09, 0x62, 0x03, 0x0b, 0x94, 0x42, 0x17, 0x48, 0x5d, 0x54, 0x06, 0x54,
	0x89, 0x0d, 0x9a, 0xc4, 0x53, 0xcb, 0x92, 0x93, 0x31, 0xf1, 0x24, 0x51, 0x60, 0xd7, 0x07, 0x40,
	0x95, 0x78, 0x29, 0x96, 0x95, 0xd8, 0xb0, 0x03, 0x25, 0x3c, 0x08, 0xf2, 0x78, 0xec, 0xfc, 0x38,
	0x41, 0xb0, 0xbb, 0x77, 0xe6, 0x9e, 0x73, 0x3c, 0xe7, 0xdc, 0x04, 0x36, 0x71, 0xe8, 0xdb, 0x93,
	0xb6, 0x1d, 0xe0, 0xa1, 0x37, 0xc6, 0x1e, 0xb1, 0xc2, 0x11, 0x65, 0x14, 0x95, 0x71, 0xe8, 0x5b,
	0x93, 0xb6, 0x7a, 0xe2, 0x51, 0xea, 0x05, 0xc4, 0xe6, 0xa7, 0xbd, 0xf1, 0xb5, 0xcd, 0xfc, 0x01,
	0x89, 0x18, 0x1e, 0x84, 0xc9, 0xa0, 0xda, 0xf0, 0xa8, 0x47, 0x79, 0x69, 0xc7, 0x95, 0x38, 0x3d,
	0x12, 0xb0, 0x98, 0x1c, 0x0f, 0x87, 0x94, 0x61, 0xe6, 0xd3, 0x61, 0x24, 0x6e, 0x5b, 0x9b, 0xa4,
	0x64, 0x10, 0xb2, 0x59, 0x72, 0x69, 0x7c, 0x96, 0x60, 0xe5, 0x42, 0x7c, 0x0c, 0xaa, 0x43, 0xc9,
	0x77, 0x15, 0xa0, 0x03, 0x53, 0x76, 0x24, 0xdf, 0x45, 0x2a, 0xac, 0xa4, 0x1f, 0xaa, 0x48, 0x3a,
	0x30, 0xab, 0x4e, 0xd6, 0xa3, 0x03, 0x58, 0x26, 0x43, 0xdc, 0x0b, 0x88, 0x22, 0xeb, 0xc0, 0xac,
	0x38, 0xa2, 0x43, 0x08, 0x16, 0xfb, 0xd4, 0x25, 0x4a, 0x91, 0xcf, 0xf3, 0x1a, 0x35, 0x60, 0x89,
	0x51, 0x86, 0x03, 0xa5, 0xa4, 0x03, 0xb3, 0xe4, 0x24, 0x4d, 0x3c, 0x19, 0xd1, 0x11, 0x53, 0xca,
	0xfc, 0x90, 0xd7, 0xe8, 0x39, 0x84, 0xfd, 0x11, 0xc1, 0x8c, 0xb8, 0xef, 0x31, 0x53, 0xfe, 0xd3,
	0x81, 0x59, 0xeb, 0xa8, 0x56, 0xf2, 0x00, 0x2b, 0x7d, 0x80, 0xf5, 0x26, 0x75, 0xe5, 0xac, 0x78,
	0xfb, 0xe3, 0x04, 0x38, 0x55, 0x81, 0xe9, 0x72, 0x82, 0x71, 0xe8, 0xa6, 0x04, 0x95, 0xbf, 0x25,
	0x10, 0x98, 0x2e, 0x33, 0xce, 0x61, 0xeb, 0x2d, 0x6f, 0x52, 0x57, 0x5e, 0x33, 0xcc, 0xc6, 0x91,
	0x43, 0x3e, 0x8c, 0x49, 0xc4, 0x32, 0x8b, 0x64, 0x61, 0xd1, 0xd2, 0x06, 0x69, 0xd5, 0x06, 0xe3,
	0x13, 0xbc, 0x77, 0xe1, 0x47, 0x2c, 0x25, 0x59, 0x81, 0x4f, 0x13, 0x87, 0xab, 0x8e, 0x34, 0x5d,
	0x87, 0xcb, 0x2b, 0x2e, 0x36, 0x60, 0xe9, 0xda, 0x27, 0x81, 0xab, 0xc8, 0xba, 0x6c, 0x56, 0x9d,
	0xa4, 0x89, 0x1d, 0x0b, 0xe3, 0x2c, 0x8a, 0x89, 0x63, 0x71, 0xcd, 0x5d, 0xf4, 0x3f, 0x12, 0x61,
	0x2d, 0xaf, 0x8d, 0x2b, 0xb8, 0xbf, 0x2e, 0x1e, 0x06, 0xb3, 0x65, 0x08, 0x49, 0xbe, 0x22, 0x84,
	0x47, 0x6b, 0x11, 0xcb, 0x66, 0xad, 0xb3, 0x67, 0x25, 0xcb, 0x68, 0x65, 0xf0, 0x6c, 0xc2, 0x78,
	0x08, 0x9b, 0x2f, 0x49, 0x40, 0x96, 0xe6, 0xec, 0xb0, 0xa5, 0x73, 0x53, 0x84, 0xb5, 0x74, 0xa6,
	0x7b, 0xf9, 0x0a, 0x5d, 0xc1, 0xfa, 0x0b, 0x9e, 0x51, 0xb6, 0x6b, 0x39, 0x19, 0xf5, 0x20, 0x17,
	0xd3, 0x79, 0xbc, 0xa8, 0x46, 0xeb, 0xe6, 0xdb, 0xaf, 0x2f, 0x52, 0xd3, 0xd8, 0xb3, 0x37, 0x7e,
	0x3c, 0x4f, 0xc1, 0x69, 0x4c, 0xbc, 0x1e, 0xd7, 0xbf, 0x13, 0xab, 0x5b, 0x89, 0xa7, 0xb0, 0xb1,
	0x6d, 0x0f, 0xd0, 0x83, 0x94, 0xfe, 0x0f, 0x5b, 0xb2, 0x53, 0xd1, 0xe0, 0x8a, 0x47, 0xea, 0xe1,
	0xa6, 0xa2, 0x1d, 0x71, 0x7c, 0x2c, 0x4c, 0xe0, 0xff, 0xab, 0xe1, 0xa1, 0x56, 0xf6, 0x9e, 0xfc,
	0x3e, 0xa9, 0xf7, 0xb7, 0x5f, 0x86, 0xc1, 0xcc, 0x38, 0xe6, 0x5a, 0x87, 0xa8, 0x99, 0xd3, 0x0a,
	0xfc, 0x88, 0x21, 0x0c, 0xeb, 0xeb, 0x51, 0xa2, 0xe3, 0x94, 0x6b, 0x6b, 0xc4, 0x3b, 0xdf, 0xa4,
	0x70, 0x1d, 0x74, 0x9a, 0x73, 0xf1, 0xec, 0xc9, 0xd7, 0xb9, 0x06, 0xee, 0xe6, 0x1a, 0xf8, 0x39,
	0xd7, 0xc0, 0xed, 0x42, 0x2b, 0xdc, 0x2d, 0xb4, 0xc2, 0xf7, 0x85, 0x56, 0x80, 0xe2, 0xff, 0xee,
	0x12, 0xbc, 0xdb, 0x1f, 0xd0, 0x11, 0x71, 0x69, 0x5f, 0x80, 0x9f, 0x4d, 0xda, 0xbd, 0x32, 0x17,
	0x78, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x63, 0x8a, 0x2a, 0x8d, 0x2c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LanguageAPIClient is the client API for LanguageAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LanguageAPIClient interface {
	CreateLanguage(ctx context.Context, in *Language, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLanguage(ctx context.Context, in *Language, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLanguageStatus(ctx context.Context, in *UpdateLanguageStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLanguage(ctx context.Context, in *ListLanguageRequest, opts ...grpc.CallOption) (*ListLanguageReply, error)
	DeleteLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type languageAPIClient struct {
	cc *grpc.ClientConn
}

func NewLanguageAPIClient(cc *grpc.ClientConn) LanguageAPIClient {
	return &languageAPIClient{cc}
}

func (c *languageAPIClient) CreateLanguage(ctx context.Context, in *Language, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.LanguageAPI/CreateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageAPIClient) UpdateLanguage(ctx context.Context, in *Language, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.LanguageAPI/UpdateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageAPIClient) UpdateLanguageStatus(ctx context.Context, in *UpdateLanguageStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.LanguageAPI/UpdateLanguageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageAPIClient) ListLanguage(ctx context.Context, in *ListLanguageRequest, opts ...grpc.CallOption) (*ListLanguageReply, error) {
	out := new(ListLanguageReply)
	err := c.cc.Invoke(ctx, "/api.v1.LanguageAPI/ListLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageAPIClient) DeleteLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.LanguageAPI/DeleteLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageAPIServer is the server API for LanguageAPI service.
type LanguageAPIServer interface {
	CreateLanguage(context.Context, *Language) (*emptypb.Empty, error)
	UpdateLanguage(context.Context, *Language) (*emptypb.Empty, error)
	UpdateLanguageStatus(context.Context, *UpdateLanguageStatusRequest) (*emptypb.Empty, error)
	ListLanguage(context.Context, *ListLanguageRequest) (*ListLanguageReply, error)
	DeleteLanguage(context.Context, *DeleteLanguageRequest) (*emptypb.Empty, error)
}

// UnimplementedLanguageAPIServer can be embedded to have forward compatible implementations.
type UnimplementedLanguageAPIServer struct {
}

func (*UnimplementedLanguageAPIServer) CreateLanguage(ctx context.Context, req *Language) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguage not implemented")
}
func (*UnimplementedLanguageAPIServer) UpdateLanguage(ctx context.Context, req *Language) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (*UnimplementedLanguageAPIServer) UpdateLanguageStatus(ctx context.Context, req *UpdateLanguageStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageStatus not implemented")
}
func (*UnimplementedLanguageAPIServer) ListLanguage(ctx context.Context, req *ListLanguageRequest) (*ListLanguageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguage not implemented")
}
func (*UnimplementedLanguageAPIServer) DeleteLanguage(ctx context.Context, req *DeleteLanguageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguage not implemented")
}

func RegisterLanguageAPIServer(s *grpc.Server, srv LanguageAPIServer) {
	s.RegisterService(&_LanguageAPI_serviceDesc, srv)
}

func _LanguageAPI_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Language)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LanguageAPI/CreateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).CreateLanguage(ctx, req.(*Language))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageAPI_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Language)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LanguageAPI/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).UpdateLanguage(ctx, req.(*Language))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageAPI_UpdateLanguageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).UpdateLanguageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LanguageAPI/UpdateLanguageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).UpdateLanguageStatus(ctx, req.(*UpdateLanguageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageAPI_ListLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).ListLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LanguageAPI/ListLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).ListLanguage(ctx, req.(*ListLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageAPI_DeleteLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageAPIServer).DeleteLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.LanguageAPI/DeleteLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageAPIServer).DeleteLanguage(ctx, req.(*DeleteLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LanguageAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.LanguageAPI",
	HandlerType: (*LanguageAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLanguage",
			Handler:    _LanguageAPI_CreateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _LanguageAPI_UpdateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguageStatus",
			Handler:    _LanguageAPI_UpdateLanguageStatus_Handler,
		},
		{
			MethodName: "ListLanguage",
			Handler:    _LanguageAPI_ListLanguage_Handler,
		},
		{
			MethodName: "DeleteLanguage",
			Handler:    _LanguageAPI_DeleteLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/language.proto",
}

func (m *Language) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Language) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Language) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintLanguage(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintLanguage(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x3a
	}
	if m.Sort != 0 {
		i = encodeVarintLanguage(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x30
	}
	if m.Total != 0 {
		i = encodeVarintLanguage(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintLanguage(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintLanguage(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLanguage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLanguageStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLanguageStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLanguageStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		dAtA4 := make([]byte, len(m.Id)*10)
		var j3 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintLanguage(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLanguageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLanguageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLanguageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintLanguage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintLanguage(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field[iNdEx])
			copy(dAtA[i:], m.Field[iNdEx])
			i = encodeVarintLanguage(dAtA, i, uint64(len(m.Field[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Enable) > 0 {
		for iNdEx := len(m.Enable) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Enable[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintLanguage(dAtA, i, uint64(len(m.Enable)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wd) > 0 {
		i -= len(m.Wd)
		copy(dAtA[i:], m.Wd)
		i = encodeVarintLanguage(dAtA, i, uint64(len(m.Wd)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLanguageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLanguageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLanguageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Language) > 0 {
		for iNdEx := len(m.Language) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Language[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLanguage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintLanguage(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLanguageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLanguageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLanguageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA6 := make([]byte, len(m.Id)*10)
		var j5 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintLanguage(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLanguage(dAtA []byte, offset int, v uint64) int {
	offset -= sovLanguage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Language) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLanguage(uint64(m.Id))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovLanguage(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovLanguage(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovLanguage(uint64(m.Total))
	}
	if m.Sort != 0 {
		n += 1 + sovLanguage(uint64(m.Sort))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovLanguage(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovLanguage(uint64(l))
	}
	return n
}

func (m *UpdateLanguageStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovLanguage(uint64(e))
		}
		n += 1 + sovLanguage(uint64(l)) + l
	}
	if m.Enable {
		n += 2
	}
	return n
}

func (m *ListLanguageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Wd)
	if l > 0 {
		n += 1 + l + sovLanguage(uint64(l))
	}
	if len(m.Enable) > 0 {
		n += 1 + sovLanguage(uint64(len(m.Enable))) + len(m.Enable)*1
	}
	if len(m.Field) > 0 {
		for _, s := range m.Field {
			l = len(s)
			n += 1 + l + sovLanguage(uint64(l))
		}
	}
	if m.Page != 0 {
		n += 1 + sovLanguage(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovLanguage(uint64(m.Size_))
	}
	return n
}

func (m *ListLanguageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovLanguage(uint64(m.Total))
	}
	if len(m.Language) > 0 {
		for _, e := range m.Language {
			l = e.Size()
			n += 1 + l + sovLanguage(uint64(l))
		}
	}
	return n
}

func (m *DeleteLanguageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovLanguage(uint64(e))
		}
		n += 1 + sovLanguage(uint64(l)) + l
	}
	return n
}

func sovLanguage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLanguage(x uint64) (n int) {
	return sovLanguage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Language) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLanguage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Language: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Language: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLanguage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLanguage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLanguageStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLanguage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLanguageStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLanguageStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLanguage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLanguage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLanguage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLanguage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLanguage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLanguage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLanguage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLanguageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLanguage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLanguageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLanguageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLanguage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enable = append(m.Enable, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLanguage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLanguage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLanguage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Enable) == 0 {
					m.Enable = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLanguage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enable = append(m.Enable, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLanguage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLanguage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLanguageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLanguage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLanguageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLanguageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLanguage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLanguage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = append(m.Language, &Language{})
			if err := m.Language[len(m.Language)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLanguage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLanguage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLanguageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLanguage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLanguageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLanguageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLanguage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLanguage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLanguage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLanguage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLanguage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLanguage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLanguage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLanguage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLanguage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLanguage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLanguage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLanguage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLanguage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLanguage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLanguage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLanguage = fmt.Errorf("proto: unexpected end of group")
)
