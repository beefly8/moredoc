// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/searchrecord.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 这里是proto文件中的结构体，可以根据需要删除或者调整
type SearchRecord struct {
	Id        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ip        string     `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Total     int32      `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Page      int32      `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	UserAgent string     `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Keywords  string     `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	SpendTime float32    `protobuf:"fixed32,10,opt,name=spend_time,json=spendTime,proto3" json:"spend_time,omitempty"`
	Username  string     `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *SearchRecord) Reset()         { *m = SearchRecord{} }
func (m *SearchRecord) String() string { return proto.CompactTextString(m) }
func (*SearchRecord) ProtoMessage()    {}
func (*SearchRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3712ada3617a9ba, []int{0}
}
func (m *SearchRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRecord.Merge(m, src)
}
func (m *SearchRecord) XXX_Size() int {
	return m.Size()
}
func (m *SearchRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRecord proto.InternalMessageInfo

func (m *SearchRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchRecord) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SearchRecord) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SearchRecord) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *SearchRecord) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchRecord) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SearchRecord) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *SearchRecord) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SearchRecord) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *SearchRecord) GetSpendTime() float32 {
	if m != nil {
		return m.SpendTime
	}
	return 0
}

func (m *SearchRecord) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteSearchRecordRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteSearchRecordRequest) Reset()         { *m = DeleteSearchRecordRequest{} }
func (m *DeleteSearchRecordRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSearchRecordRequest) ProtoMessage()    {}
func (*DeleteSearchRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3712ada3617a9ba, []int{1}
}
func (m *DeleteSearchRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSearchRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSearchRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSearchRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSearchRecordRequest.Merge(m, src)
}
func (m *DeleteSearchRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSearchRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSearchRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSearchRecordRequest proto.InternalMessageInfo

func (m *DeleteSearchRecordRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type ListSearchRecordRequest struct {
	Page     int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size_    int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Keywords string   `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Field    []string `protobuf:"bytes,4,rep,name=field,proto3" json:"field,omitempty"`
	Order    string   `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	UserId   []int64  `protobuf:"varint,6,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ip       string   `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *ListSearchRecordRequest) Reset()         { *m = ListSearchRecordRequest{} }
func (m *ListSearchRecordRequest) String() string { return proto.CompactTextString(m) }
func (*ListSearchRecordRequest) ProtoMessage()    {}
func (*ListSearchRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3712ada3617a9ba, []int{2}
}
func (m *ListSearchRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSearchRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSearchRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSearchRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSearchRecordRequest.Merge(m, src)
}
func (m *ListSearchRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSearchRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSearchRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSearchRecordRequest proto.InternalMessageInfo

func (m *ListSearchRecordRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListSearchRecordRequest) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ListSearchRecordRequest) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *ListSearchRecordRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *ListSearchRecordRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListSearchRecordRequest) GetUserId() []int64 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *ListSearchRecordRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ListSearchRecordReply struct {
	Total        int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	SearchRecord []*SearchRecord `protobuf:"bytes,2,rep,name=search_record,json=searchRecord,proto3" json:"search_record,omitempty"`
}

func (m *ListSearchRecordReply) Reset()         { *m = ListSearchRecordReply{} }
func (m *ListSearchRecordReply) String() string { return proto.CompactTextString(m) }
func (*ListSearchRecordReply) ProtoMessage()    {}
func (*ListSearchRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3712ada3617a9ba, []int{3}
}
func (m *ListSearchRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSearchRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSearchRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSearchRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSearchRecordReply.Merge(m, src)
}
func (m *ListSearchRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *ListSearchRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSearchRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListSearchRecordReply proto.InternalMessageInfo

func (m *ListSearchRecordReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListSearchRecordReply) GetSearchRecord() []*SearchRecord {
	if m != nil {
		return m.SearchRecord
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchRecord)(nil), "api.v1.SearchRecord")
	proto.RegisterType((*DeleteSearchRecordRequest)(nil), "api.v1.DeleteSearchRecordRequest")
	proto.RegisterType((*ListSearchRecordRequest)(nil), "api.v1.ListSearchRecordRequest")
	proto.RegisterType((*ListSearchRecordReply)(nil), "api.v1.ListSearchRecordReply")
}

func init() { proto.RegisterFile("api/v1/searchrecord.proto", fileDescriptor_e3712ada3617a9ba) }

var fileDescriptor_e3712ada3617a9ba = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0xd4, 0x3c,
	0x10, 0xae, 0x93, 0xdd, 0x6d, 0xe3, 0xf6, 0xff, 0x01, 0x6b, 0x69, 0xdd, 0xb4, 0x4d, 0xd3, 0x9c,
	0x22, 0x90, 0x12, 0xb5, 0x88, 0x03, 0xe2, 0x80, 0xb6, 0x82, 0x43, 0x25, 0x0e, 0x55, 0xe0, 0xc4,
	0x65, 0xe5, 0x6e, 0xdc, 0xd4, 0x22, 0x89, 0x4d, 0xe2, 0x2d, 0x5a, 0x8e, 0x3c, 0x41, 0x25, 0xde,
	0x84, 0xa7, 0xe0, 0x58, 0x89, 0x0b, 0x37, 0x50, 0xcb, 0x85, 0x27, 0xe0, 0x8a, 0x6c, 0x27, 0x65,
	0xdb, 0xee, 0x4a, 0xdc, 0x3c, 0x9f, 0x3d, 0xdf, 0xcc, 0x7c, 0x33, 0x63, 0xb8, 0x4e, 0x04, 0x8b,
	0x4f, 0x77, 0xe3, 0x9a, 0x92, 0x6a, 0x74, 0x52, 0xd1, 0x11, 0xaf, 0xd2, 0x48, 0x54, 0x5c, 0x72,
	0xd4, 0x23, 0x82, 0x45, 0xa7, 0xbb, 0xee, 0x76, 0xc6, 0x79, 0x96, 0xd3, 0x58, 0xa3, 0x47, 0xe3,
	0xe3, 0x58, 0xb2, 0x82, 0xd6, 0x92, 0x14, 0xc2, 0x3c, 0x74, 0xfb, 0x19, 0xcf, 0xb8, 0x3e, 0xc6,
	0xea, 0xd4, 0xa0, 0x9b, 0x8d, 0x9b, 0x0a, 0x40, 0xca, 0x92, 0x4b, 0x22, 0x19, 0x2f, 0xeb, 0xe6,
	0x76, 0xe3, 0x26, 0x29, 0x2d, 0x84, 0x9c, 0x98, 0xcb, 0xe0, 0x97, 0x05, 0x57, 0x5e, 0xe9, 0x84,
	0x12, 0x9d, 0x10, 0xfa, 0x1f, 0x5a, 0x2c, 0xc5, 0xc0, 0x07, 0xa1, 0x9d, 0x58, 0x2c, 0x45, 0x6b,
	0x70, 0x71, 0x5c, 0xd3, 0x6a, 0xc8, 0x52, 0x6c, 0x69, 0xb0, 0xa7, 0xcc, 0x03, 0xf3, 0x50, 0x60,
	0xdb, 0x07, 0xa1, 0x93, 0x58, 0x4c, 0xa0, 0x3e, 0xec, 0x4a, 0x2e, 0x49, 0x8e, 0x3b, 0x3e, 0x08,
	0xbb, 0x89, 0x31, 0x10, 0x82, 0x1d, 0x41, 0x32, 0x8a, 0xbb, 0x1a, 0xd4, 0x67, 0xb4, 0x05, 0xa1,
	0xa6, 0x24, 0x19, 0x2d, 0x25, 0xee, 0x69, 0x06, 0x47, 0x21, 0x03, 0x05, 0x20, 0x17, 0x2e, 0xbd,
	0xa5, 0x93, 0xf7, 0xbc, 0x4a, 0x6b, 0xbc, 0xa8, 0x2f, 0xaf, 0x6c, 0xf4, 0x0c, 0xc2, 0x51, 0x45,
	0x89, 0xa4, 0xe9, 0x90, 0x48, 0xbc, 0xe4, 0x83, 0x70, 0x79, 0xcf, 0x8d, 0x4c, 0x81, 0x51, 0x5b,
	0x60, 0xf4, 0xba, 0x55, 0x6d, 0xbf, 0x73, 0xf6, 0x7d, 0x1b, 0x24, 0x4e, 0xe3, 0x33, 0x90, 0x8a,
	0x60, 0x2c, 0xd2, 0x96, 0xc0, 0xf9, 0x57, 0x82, 0xc6, 0x67, 0x20, 0x55, 0xf2, 0xb5, 0xa0, 0x65,
	0x3a, 0x54, 0xad, 0xc1, 0xd0, 0x07, 0xa1, 0x95, 0x38, 0x1a, 0x51, 0x4e, 0x2a, 0x79, 0x55, 0x49,
	0x49, 0x0a, 0x8a, 0x97, 0x4d, 0xf2, 0xad, 0x1d, 0x3c, 0x84, 0xeb, 0xcf, 0x69, 0x4e, 0x25, 0x9d,
	0x16, 0x3c, 0xa1, 0xef, 0xc6, 0xb4, 0x96, 0x57, 0xba, 0xdb, 0x46, 0xf7, 0xe0, 0x33, 0x80, 0x6b,
	0x2f, 0x59, 0x2d, 0x67, 0xbd, 0x6d, 0x45, 0x05, 0x53, 0xa2, 0x22, 0xd8, 0xa9, 0xd9, 0x07, 0xaa,
	0x9b, 0xd4, 0x4d, 0xf4, 0xf9, 0x9a, 0x92, 0xf6, 0x0d, 0x25, 0xfb, 0xb0, 0x7b, 0xcc, 0x68, 0x9e,
	0xe2, 0x8e, 0x6f, 0x87, 0x4e, 0x62, 0x0c, 0x85, 0xf2, 0x2a, 0xa5, 0x95, 0xee, 0x97, 0x93, 0x18,
	0x63, 0x7a, 0x06, 0x7a, 0x3a, 0xc1, 0xeb, 0x33, 0xb0, 0xd8, 0xce, 0x40, 0x70, 0x02, 0xef, 0xdf,
	0xce, 0x59, 0xe4, 0x93, 0xbf, 0xc3, 0x61, 0x06, 0xab, 0x19, 0x8e, 0x27, 0xf0, 0x3f, 0xb3, 0x0c,
	0x43, 0xb3, 0x0d, 0xd8, 0xf2, 0xed, 0x70, 0x79, 0xaf, 0x1f, 0x99, 0x75, 0x88, 0xae, 0xf1, 0xac,
	0xd4, 0x53, 0xd6, 0xde, 0x6f, 0x00, 0xef, 0x4c, 0x5f, 0x0f, 0x0e, 0x0f, 0x50, 0x01, 0xd1, 0x6d,
	0x7d, 0xd1, 0x4e, 0xcb, 0x36, 0x57, 0x7b, 0x77, 0xf5, 0xd6, 0x00, 0xbc, 0x50, 0x2b, 0x12, 0x6c,
	0x7e, 0xfc, 0xfa, 0xf3, 0x93, 0xb5, 0xfa, 0xa0, 0x1f, 0xcf, 0x58, 0x5d, 0x34, 0x86, 0x77, 0x6f,
	0x16, 0x8b, 0xb6, 0xdb, 0x60, 0x73, 0x5a, 0xe7, 0x6e, 0xcd, 0x7f, 0x20, 0xf2, 0x49, 0xb0, 0xa3,
	0x23, 0x6e, 0xa0, 0xf5, 0x59, 0x11, 0xe3, 0x9c, 0xd5, 0x72, 0xff, 0xf1, 0x97, 0x0b, 0x0f, 0x9c,
	0x5f, 0x78, 0xe0, 0xc7, 0x85, 0x07, 0xce, 0x2e, 0xbd, 0x85, 0xf3, 0x4b, 0x6f, 0xe1, 0xdb, 0xa5,
	0xb7, 0x00, 0x9b, 0x5f, 0xe4, 0x10, 0xbc, 0xb9, 0x57, 0xf0, 0x8a, 0xa6, 0x7c, 0xd4, 0xb0, 0x3c,
	0x3d, 0xdd, 0x3d, 0xea, 0xe9, 0xda, 0x1e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x2d, 0xa1,
	0xb4, 0x86, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchRecordAPIClient is the client API for SearchRecordAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchRecordAPIClient interface {
	DeleteSearchRecord(ctx context.Context, in *DeleteSearchRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSearchRecord(ctx context.Context, in *ListSearchRecordRequest, opts ...grpc.CallOption) (*ListSearchRecordReply, error)
}

type searchRecordAPIClient struct {
	cc *grpc.ClientConn
}

func NewSearchRecordAPIClient(cc *grpc.ClientConn) SearchRecordAPIClient {
	return &searchRecordAPIClient{cc}
}

func (c *searchRecordAPIClient) DeleteSearchRecord(ctx context.Context, in *DeleteSearchRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.SearchRecordAPI/DeleteSearchRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchRecordAPIClient) ListSearchRecord(ctx context.Context, in *ListSearchRecordRequest, opts ...grpc.CallOption) (*ListSearchRecordReply, error) {
	out := new(ListSearchRecordReply)
	err := c.cc.Invoke(ctx, "/api.v1.SearchRecordAPI/ListSearchRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchRecordAPIServer is the server API for SearchRecordAPI service.
type SearchRecordAPIServer interface {
	DeleteSearchRecord(context.Context, *DeleteSearchRecordRequest) (*emptypb.Empty, error)
	ListSearchRecord(context.Context, *ListSearchRecordRequest) (*ListSearchRecordReply, error)
}

// UnimplementedSearchRecordAPIServer can be embedded to have forward compatible implementations.
type UnimplementedSearchRecordAPIServer struct {
}

func (*UnimplementedSearchRecordAPIServer) DeleteSearchRecord(ctx context.Context, req *DeleteSearchRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchRecord not implemented")
}
func (*UnimplementedSearchRecordAPIServer) ListSearchRecord(ctx context.Context, req *ListSearchRecordRequest) (*ListSearchRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearchRecord not implemented")
}

func RegisterSearchRecordAPIServer(s *grpc.Server, srv SearchRecordAPIServer) {
	s.RegisterService(&_SearchRecordAPI_serviceDesc, srv)
}

func _SearchRecordAPI_DeleteSearchRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchRecordAPIServer).DeleteSearchRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.SearchRecordAPI/DeleteSearchRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchRecordAPIServer).DeleteSearchRecord(ctx, req.(*DeleteSearchRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchRecordAPI_ListSearchRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchRecordAPIServer).ListSearchRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.SearchRecordAPI/ListSearchRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchRecordAPIServer).ListSearchRecord(ctx, req.(*ListSearchRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchRecordAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.SearchRecordAPI",
	HandlerType: (*SearchRecordAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSearchRecord",
			Handler:    _SearchRecordAPI_DeleteSearchRecord_Handler,
		},
		{
			MethodName: "ListSearchRecord",
			Handler:    _SearchRecordAPI_ListSearchRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/searchrecord.proto",
}

func (m *SearchRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x5a
	}
	if m.SpendTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SpendTime))))
		i--
		dAtA[i] = 0x55
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintSearchrecord(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintSearchrecord(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Keywords) > 0 {
		i -= len(m.Keywords)
		copy(dAtA[i:], m.Keywords)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Keywords)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x32
	}
	if m.Page != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x28
	}
	if m.Total != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSearchRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSearchRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSearchRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA4 := make([]byte, len(m.Id)*10)
		var j3 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSearchrecord(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSearchRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSearchRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSearchRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserId) > 0 {
		dAtA6 := make([]byte, len(m.UserId)*10)
		var j5 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintSearchrecord(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field[iNdEx])
			copy(dAtA[i:], m.Field[iNdEx])
			i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Field[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Keywords) > 0 {
		i -= len(m.Keywords)
		copy(dAtA[i:], m.Keywords)
		i = encodeVarintSearchrecord(dAtA, i, uint64(len(m.Keywords)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSearchRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSearchRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSearchRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SearchRecord) > 0 {
		for iNdEx := len(m.SearchRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearchrecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintSearchrecord(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSearchrecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovSearchrecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearchRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSearchrecord(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovSearchrecord(uint64(m.UserId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSearchrecord(uint64(m.Total))
	}
	if m.Page != 0 {
		n += 1 + sovSearchrecord(uint64(m.Page))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	l = len(m.Keywords)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	if m.SpendTime != 0 {
		n += 5
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	return n
}

func (m *DeleteSearchRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSearchrecord(uint64(e))
		}
		n += 1 + sovSearchrecord(uint64(l)) + l
	}
	return n
}

func (m *ListSearchRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSearchrecord(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovSearchrecord(uint64(m.Size_))
	}
	l = len(m.Keywords)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	if len(m.Field) > 0 {
		for _, s := range m.Field {
			l = len(s)
			n += 1 + l + sovSearchrecord(uint64(l))
		}
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovSearchrecord(uint64(e))
		}
		n += 1 + sovSearchrecord(uint64(l)) + l
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSearchrecord(uint64(l))
	}
	return n
}

func (m *ListSearchRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovSearchrecord(uint64(m.Total))
	}
	if len(m.SearchRecord) > 0 {
		for _, e := range m.SearchRecord {
			l = e.Size()
			n += 1 + l + sovSearchrecord(uint64(l))
		}
	}
	return n
}

func sovSearchrecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSearchrecord(x uint64) (n int) {
	return sovSearchrecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SpendTime = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSearchRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSearchRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSearchRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchrecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchrecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearchrecord
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearchrecord
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchrecord
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearchrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSearchRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSearchRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSearchRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchrecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearchrecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearchrecord
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearchrecord
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserId) == 0 {
					m.UserId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearchrecord
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSearchRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearchrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSearchRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSearchRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearchrecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchRecord = append(m.SearchRecord, &SearchRecord{})
			if err := m.SearchRecord[len(m.SearchRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearchrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSearchrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearchrecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearchrecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearchrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSearchrecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSearchrecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSearchrecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSearchrecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearchrecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSearchrecord = fmt.Errorf("proto: unexpected end of group")
)
